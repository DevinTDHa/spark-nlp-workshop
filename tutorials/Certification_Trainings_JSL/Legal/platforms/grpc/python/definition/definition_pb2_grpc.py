# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import json

import grpc

import definition.definition_pb2 as definition__pb2
from sparknlp_manager.sparknlp_manager import SparkNLPManager


class SparkNLPStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.clf = channel.unary_unary(
                '/routeguide.SparkNLP/clf',
                request_serializer=definition__pb2.nlp_input.SerializeToString,
                response_deserializer=definition__pb2.nlp_output.FromString,
                )
        self.ner = channel.unary_unary(
                '/routeguide.SparkNLP/ner',
                request_serializer=definition__pb2.nlp_input.SerializeToString,
                response_deserializer=definition__pb2.nlp_output.FromString,
                )
        self.re = channel.unary_unary(
                '/routeguide.SparkNLP/re',
                request_serializer=definition__pb2.nlp_input.SerializeToString,
                response_deserializer=definition__pb2.nlp_output.FromString,
                )


class SparkNLPServicer(object):
    """Interface exported by the server.
    """
    def __init__(self):
        self.spark_manager = SparkNLPManager()

    def clf(self, request, context):
        """A simple RPC where the client sends a request to the server using the stub and waits for a response to come back,
        just like a normal function call.
        """
        st = json.dumps(self.spark_manager.pipelines['clf'].annotate(request.text))
        print(st)
        return definition__pb2.nlp_output(result=st)
        #context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        #context.set_details('Method not implemented!')
        #raise NotImplementedError('Method not implemented!')

    def ner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def re(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SparkNLPServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'clf': grpc.unary_unary_rpc_method_handler(
                    servicer.clf,
                    request_deserializer=definition__pb2.nlp_input.FromString,
                    response_serializer=definition__pb2.nlp_output.SerializeToString,
            ),
            'ner': grpc.unary_unary_rpc_method_handler(
                    servicer.ner,
                    request_deserializer=definition__pb2.nlp_input.FromString,
                    response_serializer=definition__pb2.nlp_output.SerializeToString,
            ),
            're': grpc.unary_unary_rpc_method_handler(
                    servicer.re,
                    request_deserializer=definition__pb2.nlp_input.FromString,
                    response_serializer=definition__pb2.nlp_output.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'routeguide.SparkNLP', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SparkNLP(object):
    """Interface exported by the server.
    """

    @staticmethod
    def clf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.SparkNLP/clf',
            definition__pb2.nlp_input.SerializeToString,
            definition__pb2.nlp_output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.SparkNLP/ner',
            definition__pb2.nlp_input.SerializeToString,
            definition__pb2.nlp_output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def re(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.SparkNLP/re',
            definition__pb2.nlp_input.SerializeToString,
            definition__pb2.nlp_output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
